import React, { useEffect, useRef, useState } from "react";
import { fetchConversation, sendMessage, Message } from "../../api/user/messageAPI";
import "@/styles/components/user/ChatbotWidget.scss";
import { User } from "../../api/user/userAPI";


// L·∫•y ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ localStorage
const getCurrentUser = (): User | null => {
  const userStr = localStorage.getItem("currentUser");
  return userStr ? JSON.parse(userStr) : null;
};

const adminId = "admin"; // ID ng∆∞·ªùi qu·∫£n tr·ªã (chatbot)

const ChatbotWidget: React.FC = () => {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const currentUser = getCurrentUser();

  // T·∫£i l·ªãch s·ª≠ h·ªôi tho·∫°i
  useEffect(() => {
    if (open && currentUser) {
      setLoading(true);
      fetchConversation(adminId)
        .then(setMessages)
        .finally(() => setLoading(false));
    }
  }, [open, currentUser]);

  // T·ª± ƒë·ªông scroll xu·ªëng khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (open && messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages, open]);

  const handleSend = async () => {
    if (!input.trim()) return;

    setLoading(true);

    try {
      // T·∫°o tin nh·∫Øn ng∆∞·ªùi d√πng
      const userMsg: Message = {
        sender_id: currentUser?._id || "anonymous",
        receiver_id: adminId,
        content: input,
        created_at: new Date().toISOString(),
      };
      
      // Hi·ªÉn th·ªã tin nh·∫Øn ngay l·∫≠p t·ª©c
      setMessages((prev) => [...prev, userMsg]);
      const currentInput = input;
      setInput("");

      // G·ª≠i tin nh·∫Øn th·ª±c s·ª± qua API
      try {
        const savedMsg = await sendMessage(adminId, currentInput);
        console.log("Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i:", savedMsg);
        
        // C√≥ th·ªÉ th√™m logic ƒë·ªÉ poll tin nh·∫Øn m·ªõi t·ª´ admin
        // setTimeout(() => checkForAdminReplies(), 3000);
        
      } catch (error) {
        console.error("L·ªói g·ª≠i tin nh·∫Øn:", error);
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho user
        const errorMsg: Message = {
          sender_id: adminId,
          receiver_id: currentUser?._id || "anonymous",
          content: "Xin l·ªói, c√≥ v·∫•n ƒë·ªÅ v·ªõi k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp.",
          created_at: new Date().toISOString(),
        };
        setTimeout(() => {
          setMessages((prev) => [...prev, errorMsg]);
        }, 1000);
      }
      
    } finally {
      setLoading(false);
    }
  };

  // H√†m ki·ªÉm tra tin nh·∫Øn m·ªõi t·ª´ admin (c√≥ th·ªÉ implement sau)
  const checkForAdminReplies = async () => {
    try {
      const conversation = await fetchConversation(adminId);
      const newMessages = conversation.filter(msg => 
        msg.sender_id === adminId && 
        !messages.some(existing => existing._id === msg._id)
      );
      
      if (newMessages.length > 0) {
        setMessages(prev => [...prev, ...newMessages]);
      }
    } catch (error) {
      console.log("Kh√¥ng th·ªÉ ki·ªÉm tra tin nh·∫Øn m·ªõi");
    }
  };

  // H√†m t·∫°o ph·∫£n h·ªìi gi·∫£ l·∫≠p
  const generateBotReply = (userMessage: string): string => {
    const msg = userMessage.toLowerCase();

    if (msg.includes("gi√°") || msg.includes("bao nhi√™u")) {
      return "B·∫°n ƒëang quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o? Vui l√≤ng cung c·∫•p t√™n s·∫£n ph·∫©m ƒë·ªÉ t√¥i ki·ªÉm tra gi√° gi√∫p b·∫°n.";
    }

    if (msg.includes("mua") || msg.includes("ƒë·∫∑t h√†ng")) {
      return "B·∫°n c√≥ th·ªÉ mua h√†ng tr·ª±c ti·∫øp tr√™n website ho·∫∑c ƒë·ªÉ l·∫°i t√™n s·∫£n ph·∫©m, t√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n ƒë·∫∑t h√†ng.";
    }

    if (msg.includes("b·∫£o h√†nh")) {
      return "S·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c b·∫£o h√†nh 12 th√°ng. N·∫øu c√≥ v·∫•n ƒë·ªÅ, b·∫°n c√≥ th·ªÉ li√™n h·ªá b·ªô ph·∫≠n k·ªπ thu·∫≠t.";
    }

    if (msg.includes("s·∫£n ph·∫©m") || msg.includes("c√≥ g√¨")) {
      return "Ch√∫ng t√¥i c√≥ nhi·ªÅu s·∫£n ph·∫©m linh ki·ªán ƒëi·ªán t·ª≠ ch·∫•t l∆∞·ª£ng cao. B·∫°n mu·ªën t√¨m lo·∫°i s·∫£n ph·∫©m n√†o?";
    }

    if (msg.includes("g·ª≠i ko ƒëc") || msg.includes("kh√¥ng g·ª≠i")) {
      return "Xin l·ªói b·∫°n! C√≥ v·∫ª nh∆∞ c√≥ v·∫•n ƒë·ªÅ v·ªõi k·∫øt n·ªëi. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i qua hotline.";
    }

    return "C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin! T√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.";
  };

  return (
    <div className="chatbot-widget">
      {!open && (
        <div className="chat-button" onClick={() => setOpen(true)}>
          <span>ü§ñ</span>
        </div>
      )}
      {open && (
        <div className="chat-container">
          <div className="chat-header">
            <span>5AE</span>
            <button className="close-button" onClick={() => setOpen(false)}>
              √ó
            </button>
          </div>
          <div className="chat-messages">
            <div className="welcome-message">
              <span className="bot-icon">ü§ñ</span>
              <div className="message-bubble">
                Xin ch√†o! B·∫°n c·∫ßn t√¨m hi·ªÉu v·ªÅ s·∫£n ph·∫©m, gi√° c·∫£ hay c·∫ßn t∆∞ v·∫•n ch·ªçn m√°y? H√£y nh·∫Øn cho t√¥i nh√©!
              </div>
            </div>
            <div className="messages-container">
              {loading && <div>ƒêang t·∫£i...</div>}
              {messages.map((m, i) => (
                <div
                  key={i}
                  className={`message ${m.sender_id === "user" ? "user" : "bot"}`}
                >
                  <span className="message-bubble">{m.content}</span>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          </div>
          <div className="chat-input">
            <input
              type="text"
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              value={input}
              onChange={e => setInput(e.target.value)}
              onKeyDown={e => e.key === "Enter" && handleSend()}
              disabled={loading}
            />
            <button onClick={handleSend} disabled={loading || !input.trim()}>
              G·ª≠i
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatbotWidget;