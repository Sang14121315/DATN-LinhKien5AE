import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import "@/styles/pages/user/register.scss";
import { registerUser } from "@/api/user/userAPI";
import { Eye, EyeOff, X } from "lucide-react";

const RegisterPage: React.FC = () => {
  const [formData, setFormData] = useState({
    name: "",
    address: "",
    phone: "",
    email: "",
    password: "",
    confirmPassword: "",
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [promotionalOptIn, setPromotionalOptIn] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");
  const [successMsg, setSuccessMsg] = useState("");
  const [isRegistering, setIsRegistering] = useState(false);
  const navigate = useNavigate();

  // Mobile bottom sheet state
  const [isMobile, setIsMobile] = useState<boolean>(
    typeof window !== "undefined" ? window.innerWidth <= 768 : false
  );
  const [isSheetOpen, setIsSheetOpen] = useState<boolean>(false);

  // Listen screen width for mobile mode
  useEffect(() => {
    const onResize = () => setIsMobile(window.innerWidth <= 768);
    window.addEventListener("resize", onResize);
    return () => window.removeEventListener("resize", onResize);
  }, []);

  // Prevent body scroll when sheet is open
  useEffect(() => {
    if (isSheetOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
    return () => {
      document.body.style.overflow = "";
    };
  }, [isSheetOpen]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isRegistering) return;

    // Validation
    if (formData.password.length < 6) {
      setErrorMsg("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±");
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      setErrorMsg("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp");
      return;
    }

    setIsRegistering(true);
    setErrorMsg("");

    try {
      const response = await registerUser({
        name: formData.name,
        address: formData.address,
        phone: formData.phone,
        email: formData.email,
        password: formData.password,
      });

      setSuccessMsg("ƒêƒÉng k√Ω th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...");

      // Auto login after successful registration
      setTimeout(() => {
        navigate("/login");
      }, 2000);
    } catch (error: any) {
      setErrorMsg(error.response?.data?.message || "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω");
    } finally {
      setIsRegistering(false);
    }
  };

  const renderRegisterForm = () => (
    <div className="register-form-container">
      <h2>
        ƒêƒÉng k√Ω <span className="highlight">5AE Linh Ki·ªán</span>
      </h2>

      {errorMsg && <div className="register-error-message">{errorMsg}</div>}
      {successMsg && (
        <div className="register-success-message">{successMsg}</div>
      )}

      <form onSubmit={handleSubmit}>
        <div className="form-section">
          <h3>Th√¥ng tin c√° nh√¢n</h3>

          <div className="form-group">
            <label htmlFor="name">H·ªç v√† t√™n *</label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p h·ªç v√† t√™n"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="address">ƒê·ªãa ch·ªâ *</label>
            <input
              type="text"
              id="address"
              name="address"
              value={formData.address}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i *</label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="email">
              Email <span className="required">*</span>
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p email"
              required
            />
          </div>
        </div>

        <div className="form-section">
          <h3>T·∫°o m·∫≠t kh·∫©u</h3>

          <div className="form-group">
            <label htmlFor="password">M·∫≠t kh·∫©u *</label>
            <div className="password-input">
              <input
                type={showPassword ? "text" : "password"}
                id="password"
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n"
                required
              />
              <button
                type="button"
                className="toggle-password"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}
              </button>
            </div>
          </div>

          <div className="form-group">
            <label htmlFor="confirmPassword">Nh·∫≠p l·∫°i m·∫≠t kh·∫©u *</label>
            <div className="password-input">
              <input
                type={showConfirmPassword ? "text" : "password"}
                id="confirmPassword"
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n"
                required
              />
              <button
                type="button"
                className="toggle-password"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              >
                {showConfirmPassword ? <EyeOff size={16} /> : <Eye size={16} />}
              </button>
            </div>
          </div>
        </div>

        <div className="checkbox-group">
          <label className="checkbox-label">
            <input
              type="checkbox"
              checked={promotionalOptIn}
              onChange={(e) => setPromotionalOptIn(e.target.checked)}
            />
            <span>ƒêƒÉng k√Ω nh·∫≠n tin khuy·∫øn m√£i t·ª´ 5AE Linh Ki·ªán</span>
          </label>
        </div>

        <div className="terms-text">
          B·∫±ng vi·ªác ƒêƒÉng k√Ω, b·∫°n ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω v·ªõi{" "}
          <a href="/terms" target="_blank" rel="noopener noreferrer">
            ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
          </a>{" "}
          v√†{" "}
          <a href="/privacy" target="_blank" rel="noopener noreferrer">
            Ch√≠nh s√°ch b·∫£o m·∫≠t
          </a>{" "}
          c·ªßa 5AE Linh Ki·ªán.
        </div>

        <button
          type="submit"
          className="register-button"
          disabled={isRegistering}
        >
          {isRegistering ? "ƒêang ƒëƒÉng k√Ω..." : "ƒêƒÉng k√Ω ngay"}
        </button>

        <div className="register-footer">
          <p>
            ƒê√£ c√≥ t√†i kho·∫£n? <Link to="/login">ƒêƒÉng nh·∫≠p ngay</Link>
          </p>
        </div>
      </form>
    </div>
  );

  return (
    <div className="register-layout-new">
      <div className="register-left-column">
        {/* New Modern Header */}
        <div className="register-header-modern">
          <div className="header-badge">
            <span className="badge-text">üéâ M·ªõi</span>
          </div>
          <h1 className="main-title">
            Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi
            <span className="brand-highlight"> 5AE Linh Ki·ªán</span>
          </h1>
          <p className="subtitle">
            N∆°i k·∫øt n·ªëi c·ªông ƒë·ªìng c√¥ng ngh·ªá v·ªõi nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao
          </p>
        </div>

        {/* Floating Stats Cards */}
        <div className="stats-container">
          <div className="stat-card">
            <div className="stat-number">100+</div>
            <div className="stat-label">S·∫£n ph·∫©m ƒëa d·∫°ng</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">24/7</div>
            <div className="stat-label">H·ªó tr·ª£ kh√°ch h√†ng</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">100%</div>
            <div className="stat-label">Ch√≠nh h√£ng</div>
          </div>
        </div>

        {/* Feature Showcase */}
        <div className="features-showcase">
          <div className="feature-item">
            <div className="feature-icon-wrapper">
              <div className="feature-icon">üöÄ</div>
            </div>
            <div className="feature-content">
              <h3>Giao h√†ng si√™u t·ªëc</h3>
              <p>Nh·∫≠n h√†ng trong v√≤ng 2-4 gi·ªù t·∫°i H√† N·ªôi</p>
            </div>
          </div>

          <div className="feature-item">
            <div className="feature-icon-wrapper">
              <div className="feature-icon">üõ°Ô∏è</div>
            </div>
            <div className="feature-content">
              <h3>B·∫£o h√†nh ch√≠nh h√£ng</h3>
              <p>Cam k·∫øt 100% s·∫£n ph·∫©m ch√≠nh h√£ng</p>
            </div>
          </div>

          <div className="feature-item">
            <div className="feature-icon-wrapper">
              <div className="feature-icon">üíé</div>
            </div>
            <div className="feature-content">
              <h3>∆Øu ƒë√£i ƒë·ªôc quy·ªÅn</h3>
              <p>Gi·∫£m gi√° ƒë·∫∑c bi·ªát cho th√†nh vi√™n m·ªõi</p>
            </div>
          </div>
        </div>

        {/* Trust Indicators */}
        <div className="trust-section">
          <div className="trust-title">ƒê∆∞·ª£c tin t∆∞·ªüng b·ªüi</div>
          <div className="trust-logos">
            <div className="trust-logo">üè¢</div>
            <div className="trust-logo">üéì</div>
            <div className="trust-logo">üè≠</div>
            <div className="trust-logo">üíª</div>
          </div>
        </div>

        {/* Call to Action */}
        <div className="cta-section">
          <div className="cta-text">
            <h3>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh ngay h√¥m nay!</h3>
            <p>Tham gia c√πng ch√∫ng t√¥i ƒë·ªÉ tr·∫£i nghi·ªám d·ªãch v·ª• t·ªët nh·∫•t</p>
          </div>

          {isMobile && (
            <div className="mobile-cta">
              <Link to="/login" className="btn btn-outline">
                ƒêƒÉng nh·∫≠p
              </Link>
              <button
                className="btn btn-primary"
                onClick={() => setIsSheetOpen(true)}
              >
                ƒêƒÉng k√Ω ngay
              </button>
            </div>
          )}
        </div>

        {/* Decorative Elements */}
        <div className="decorative-elements">
          <div className="floating-circle circle-1"></div>
          <div className="floating-circle circle-2"></div>
          <div className="floating-circle circle-3"></div>
          <div className="floating-dots dots-1"></div>
          <div className="floating-dots dots-2"></div>
        </div>
      </div>

      {/* Right Column - Register Form (hidden on mobile) */}
      <div className="register-right-column">{renderRegisterForm()}</div>

      {/* Mobile Bottom Sheet */}
      {isMobile && (
        <div
          className={`mobile-register-sheet ${isSheetOpen ? "open" : ""}`}
          onClick={() => setIsSheetOpen(false)}
        >
          <div className="sheet" onClick={(e) => e.stopPropagation()}>
            <div className="sheet-header">
              <div className="sheet-drag-handle" />
              <button
                className="sheet-close"
                onClick={() => setIsSheetOpen(false)}
                aria-label="ƒê√≥ng"
              >
                <X size={20} />
              </button>
            </div>
            <div className="sheet-content">{renderRegisterForm()}</div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RegisterPage;
