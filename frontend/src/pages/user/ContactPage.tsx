import React, { useState, useRef, useEffect, useCallback } from 'react';
import { sendContact } from '@/api/user/contactAPI';
import '@/styles/pages/user/contact.scss';

interface FormData {
  name: string;
  email: string;
  phone: string;
  title: string;
  message: string;
}

const initialForm: FormData = {
  name: '',
  email: '',
  phone: '',
  title: '',
  message: '',
};

const faqList = [
  {
    question: 'T√¥i c√≥ th·ªÉ mua linh ki·ªán ·ªü ƒë√¢u?',
    answer: 'B·∫°n c√≥ th·ªÉ mua tr·ª±c ti·∫øp t·∫°i c·ª≠a h√†ng ho·∫∑c ƒë·∫∑t h√†ng online qua website 5AnhEmPC.',
  },
  {
    question: 'Ph∆∞∆°ng th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c h·ªó tr·ª£?',
    answer: 'Ch√∫ng t√¥i h·ªó tr·ª£ chuy·ªÉn kho·∫£n, th·∫ª ng√¢n h√†ng, v√≠ ƒëi·ªán t·ª≠ nh∆∞ Momo, ZaloPay.',
  },
  {
    question: 'Th·ªùi gian giao h√†ng l√† bao l√¢u?',
    answer: 'Giao h√†ng n·ªôi th√†nh trong 24h, c√°c t·ªânh t·ª´ 2‚Äì5 ng√†y l√†m vi·ªác.',
  },
  {
    question: 'Ch√≠nh s√°ch ƒë·ªïi tr·∫£ nh∆∞ th·∫ø n√†o?',
    answer: 'ƒê·ªïi tr·∫£ trong v√≤ng 7 ng√†y n·∫øu s·∫£n ph·∫©m l·ªói do nh√† s·∫£n xu·∫•t. Vui l√≤ng gi·ªØ h√≥a ƒë∆°n mua h√†ng.',
  },
];

const ContactPage = () => {
  const [formData, setFormData] = useState<FormData>(initialForm);
  const [activeIndex, setActiveIndex] = useState<number | null>(null);
  const [toast, setToast] = useState<string | null>(null);
  const firstInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    firstInputRef.current?.focus();
  }, []);

  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  }, []);

  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await sendContact(formData);
      setToast('‚úÖ Tin nh·∫Øn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!');
      setFormData(initialForm);
      firstInputRef.current?.focus();
      setTimeout(() => setToast(null), 2000);
    } catch (error) {
      let msg = '‚ùå G·ª≠i tin nh·∫Øn th·∫•t b·∫°i!';
      if (error instanceof Error && 'response' in error) {
        // @ts-expect-error: error c√≥ th·ªÉ l√† AxiosError c√≥ thu·ªôc t√≠nh response
        msg = error.response?.data?.message || msg;
      }
      setToast(msg);
      setTimeout(() => setToast(null), 2000);
    }
  }, [formData]);

  return (
    <main className="contact-page beautiful-bg">
      {/* Header minh h·ªça l·ªõn */}
      <section className="contact-hero">
        <div className="hero-icon">
          <span role="img" aria-label="contact">üì¨</span>
        </div>
        <h1>Li√™n h·ªá v·ªõi <span className="brand-gradient">5AnhEmPC</span></h1>
        <p className="hero-desc">
          Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ m·ªçi th·∫Øc m·∫Øc c·ªßa b·∫°n.<br />H√£y g·ª≠i th√¥ng tin li√™n h·ªá n·∫øu c·∫ßn gi√∫p ƒë·ª°!
        </p>
      </section>

      {/* Info */}
      <section className="contact-intro">
        <div className="contact-info">
          <div><span>üìû</span> <strong>Hotline:</strong> 0909 123 456</div>
          <div><span>‚úâÔ∏è</span> <strong>Email:</strong> hotro@5anhempc.vn</div>
          <div><span>üè¢</span> <strong>ƒê·ªãa ch·ªâ:</strong> 123 ƒê∆∞·ªùng C√¥ng Ngh·ªá, Qu·∫≠n K·ªπ Thu·∫≠t, TP.HCM</div>
          <div><span>üïí</span> <strong>Gi·ªù l√†m vi·ªác:</strong> Th·ª© 2 ‚Äì Th·ª© 7, 8:00 ‚Äì 18:00</div>
        </div>
      </section>

      {/* Form */}
      <section className="contact-form-wrapper glass-form">
        <h2>G·ª≠i Y√™u C·∫ßu ho·∫∑c C√¢u H·ªèi</h2>
        <form className="contact-form" onSubmit={handleSubmit} autoComplete="off">
          {[
            { label: 'Ch·ªß ƒë·ªÅ', name: 'title', type: 'text', placeholder: 'Nh·∫≠p ch·ªß ƒë·ªÅ li√™n h·ªá', ref: firstInputRef },
            { label: 'H·ªç v√† T√™n', name: 'name', type: 'text', placeholder: 'Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n' },
            { label: 'Email', name: 'email', type: 'email', placeholder: 'Nh·∫≠p email c·ªßa b·∫°n' },
            { label: 'S·ªë ƒëi·ªán tho·∫°i', name: 'phone', type: 'text', placeholder: 'Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (10 ch·ªØ s·ªë)' },
          ].map(({ label, name, type, placeholder, ref }) => (
            <div key={name} className="form-group">
              <label htmlFor={name}>{label}</label>
              <input
                type={type}
                name={name}
                id={name}
                value={formData[name as keyof FormData]}
                onChange={handleChange}
                placeholder={placeholder}
                required
                ref={ref}
              />
            </div>
          ))}
          <div className="form-group">
            <label htmlFor="message">N·ªôi dung chi ti·∫øt</label>
            <textarea
              name="message"
              id="message"
              rows={5}
              value={formData.message}
              onChange={handleChange}
              placeholder="Nh·∫≠p n·ªôi dung chi ti·∫øt"
              required
            />
          </div>
          <button type="submit" className="submit-btn gradient-btn">G·ª¨I Y√äU C·∫¶U</button>
        </form>
      </section>

      {/* FAQ */}
      <section className="faq-section beautiful-faq">
        <h2>C√¢u H·ªèi Th∆∞·ªùng G·∫∑p</h2>
        <p>Gi·∫£i ƒë√°p nhanh nh·ªØng th·∫Øc m·∫Øc ph·ªï bi·∫øn</p>
        <div className="faq-accordion">
          {faqList.map((item, index) => (
            <div key={index} className={`faq-item${activeIndex === index ? ' active' : ''}`}> 
              <button
                className={`faq-question${activeIndex === index ? ' active' : ''}`}
                onClick={() => setActiveIndex(index === activeIndex ? null : index)}
                type="button"
                aria-expanded={activeIndex === index}
                aria-controls={`faq-answer-${index}`}
              >
                {item.question}
                <span className="toggle-icon">{activeIndex === index ? '‚àí' : '+'}</span>
              </button>
              <div
                className="faq-answer-wrapper"
                id={`faq-answer-${index}`}
                style={{ maxHeight: activeIndex === index ? 200 : 0 }}
                aria-hidden={activeIndex !== index}
              >
                {activeIndex === index && (
                  <div className="faq-answer">{item.answer}</div>
                )}
              </div>
            </div>
          ))}
        </div>
      </section>
      {toast && (
        <div className={`contact-toast-popup user-toast`}>{toast}</div>
      )}
    </main>
  );
};

export default ContactPage;
