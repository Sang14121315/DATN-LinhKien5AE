const axios = require("axios");

// C·∫•u h√¨nh EmailJS REST API
const EMAILJS_CONFIG = {
  SERVICE_ID: "service_qi4c4fw",
  TEMPLATE_ID: "template_mk5ebrk",
  PUBLIC_KEY: "Swpu9Iyd6YA9wadVX",
};

// Debug: Log c·∫•u h√¨nh
console.log("üîß EmailJS Config:", EMAILJS_CONFIG);

// G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
const sendOrderConfirmationEmail = async (orderData) => {
  try {
    console.log("üìß Starting email send...");
    console.log("üìß Order data:", orderData);
    console.log("üìß Config:", EMAILJS_CONFIG);

    // T·∫°o HTML cho danh s√°ch s·∫£n ph·∫©m
    const productsHtml =
      orderData.items
        ?.map(
          (item) => `
      <tr>
        <td class="image-cell">
          <img src="${
            item.img_url || "https://via.placeholder.com/80x80?text=No+Image"
          }" alt="${item.name}" class="product-img">
        </td>
        <td class="name-cell">
          <div class="product-name">${item.name}</div>
        </td>
        <td class="quantity-cell">
          <span class="quantity">${item.quantity}</span>
        </td>
        <td class="price-cell">
          <div class="product-price">${item.price?.toLocaleString(
            "vi-VN"
          )} VNƒê</div>
        </td>
        <td class="price-cell">
          <div class="product-total">${(
            item.price * item.quantity
          )?.toLocaleString("vi-VN")} VNƒê</div>
        </td>
      </tr>
    `
        )
        .join("") || "";

    const getStatusText = (status) => {
      const statusMap = {
        pending: "Ch·ªù x·ª≠ l√Ω",
        shipping: "ƒêang giao h√†ng",
        completed: "ƒê√£ giao h√†ng",
        canceled: "ƒê√£ h·ªßy",
        confirmed: "ƒê√£ x√°c nh·∫≠n",
        delivered: "ƒê√£ giao h√†ng",
        cancelled: "ƒê√£ h·ªßy",
        paid: "ƒê√£ thanh to√°n",
        processing: "ƒêang x·ª≠ l√Ω",
      };
      return statusMap[status] || status;
    };

    const templateParams = {
      to_email: orderData.customer.email,
      to_name: orderData.customer.name,
      order_id: orderData._id,
      order_date: new Date(orderData.created_at).toLocaleString("vi-VN"),
      total_amount: orderData.total.toLocaleString("vi-VN"),
      customer_address: orderData.customer.address,
      customer_phone: orderData.customer.phone,
      payment_method:
        orderData.payment_method === "cod"
          ? "Thanh to√°n khi nh·∫≠n h√†ng"
          : "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
      status: getStatusText(orderData.status || "pending"),
      // Th√™m c√°c bi·∫øn ph·ª• ƒë·ªÉ ƒë·∫£m b·∫£o
      email: orderData.customer.email,
      name: orderData.customer.name,
      phone: orderData.customer.phone,
      address: orderData.customer.address,
      // Th√™m danh s√°ch s·∫£n ph·∫©m
      products_html: productsHtml,
      products_count: orderData.items?.length || 0,
    };

    console.log("üìß Template params:", templateParams);

    // S·ª≠ d·ª•ng EmailJS REST API
    const response = await axios.post(
      `https://api.emailjs.com/api/v1.0/email/send`,
      {
        service_id: EMAILJS_CONFIG.SERVICE_ID,
        template_id: EMAILJS_CONFIG.TEMPLATE_ID,
        user_id: EMAILJS_CONFIG.PUBLIC_KEY,
        template_params: templateParams,
      },
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    console.log("‚úÖ Email sent successfully:", response.data);
    return { success: true, data: response.data };
  } catch (error) {
    console.error("‚ùå Email error:", error.response?.data || error.message);
    return { success: false, error: error.response?.data || error.message };
  }
};

// G·ª≠i email c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
const sendOrderStatusUpdateEmail = async (orderData, oldStatus, newStatus) => {
  try {
    console.log("üìß Starting status update email...");
    console.log("üìß Order data:", orderData);
    console.log("üìß Status change:", oldStatus, "->", newStatus);

    // T·∫°o HTML cho danh s√°ch s·∫£n ph·∫©m
    const productsHtml =
      orderData.items
        ?.map(
          (item) => `
      <tr>
        <td class="image-cell">
          <img src="${
            item.img_url || "https://via.placeholder.com/80x80?text=No+Image"
          }" alt="${item.name}" class="product-img">
        </td>
        <td class="name-cell">
          <div class="product-name">${item.name}</div>
        </td>
        <td class="quantity-cell">
          <span class="quantity">${item.quantity}</span>
        </td>
        <td class="price-cell">
          <div class="product-price">${item.price?.toLocaleString(
            "vi-VN"
          )} VNƒê</div>
        </td>
        <td class="price-cell">
          <div class="product-total">${(
            item.price * item.quantity
          )?.toLocaleString("vi-VN")} VNƒê</div>
        </td>
      </tr>
    `
        )
        .join("") || "";

    const getStatusText = (status) => {
      const statusMap = {
        pending: "Ch·ªù x·ª≠ l√Ω",
        shipping: "ƒêang giao h√†ng",
        completed: "ƒê√£ giao h√†ng",
        canceled: "ƒê√£ h·ªßy",
        confirmed: "ƒê√£ x√°c nh·∫≠n",
        delivered: "ƒê√£ giao h√†ng",
        cancelled: "ƒê√£ h·ªßy",
        paid: "ƒê√£ thanh to√°n",
        processing: "ƒêang x·ª≠ l√Ω",
      };
      return statusMap[status] || status;
    };

    const templateParams = {
      to_email: orderData.customer.email,
      to_name: orderData.customer.name,
      order_id: orderData._id,
      order_date: new Date(orderData.created_at).toLocaleString("vi-VN"),
      total_amount: orderData.total.toLocaleString("vi-VN"),
      customer_address: orderData.customer.address,
      customer_phone: orderData.customer.phone,
      payment_method:
        orderData.payment_method === "cod"
          ? "Thanh to√°n khi nh·∫≠n h√†ng"
          : "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
      old_status: getStatusText(oldStatus),
      new_status: getStatusText(newStatus),
      status_message: getStatusMessage(newStatus),
      // Th√™m c√°c bi·∫øn ph·ª• ƒë·ªÉ ƒë·∫£m b·∫£o
      email: orderData.customer.email,
      name: orderData.customer.name,
      phone: orderData.customer.phone,
      address: orderData.customer.address,
      // Th√™m danh s√°ch s·∫£n ph·∫©m
      products_html: productsHtml,
      products_count: orderData.items?.length || 0,
    };

    console.log("üìß Template params:", templateParams);

    const response = await axios.post(
      `https://api.emailjs.com/api/v1.0/email/send`,
      {
        service_id: EMAILJS_CONFIG.SERVICE_ID,
        template_id: EMAILJS_CONFIG.TEMPLATE_ID,
        user_id: EMAILJS_CONFIG.PUBLIC_KEY,
        template_params: templateParams,
      },
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    console.log("‚úÖ Status update email sent successfully:", response.data);
    return { success: true, data: response.data };
  } catch (error) {
    console.error(
      "‚ùå Status update email error:",
      error.response?.data || error.message
    );
    return { success: false, error: error.response?.data || error.message };
  }
};

// G·ª≠i email th√¥ng b√°o ƒë∆°n h√†ng m·ªõi cho admin
const sendOrderNotificationToAdmin = async (orderData) => {
  try {
    console.log("üìß Starting admin notification email...");
    console.log("üìß Order data for admin:", orderData);

    // T·∫°o HTML cho danh s√°ch s·∫£n ph·∫©m
    const productsHtml =
      orderData.items
        ?.map(
          (item) => `
      <tr>
        <td class="image-cell">
          <img src="${
            item.img_url || "https://via.placeholder.com/80x80?text=No+Image"
          }" alt="${item.name}" class="product-img">
        </td>
        <td class="name-cell">
          <div class="product-name">${item.name}</div>
        </td>
        <td class="quantity-cell">
          <span class="quantity">${item.quantity}</span>
        </td>
        <td class="price-cell">
          <div class="product-price">${item.price?.toLocaleString(
            "vi-VN"
          )} VNƒê</div>
        </td>
        <td class="price-cell">
          <div class="product-total">${(
            item.price * item.quantity
          )?.toLocaleString("vi-VN")} VNƒê</div>
        </td>
      </tr>
    `
        )
        .join("") || "";

    // ƒê·ªçc template HTML
    const fs = require('fs');
    const path = require('path');
    let templateHtml = '';
    
    try {
      templateHtml = fs.readFileSync(
        path.join(__dirname, 'adminOrderNotificationTemplate.html'), 
        'utf8'
      );
    } catch (templateError) {
      console.error('‚ùå Error reading template:', templateError);
      // Fallback template ƒë∆°n gi·∫£n
      templateHtml = `
        <h1>üõí ƒê∆°n h√†ng m·ªõi #${orderData._id}</h1>
        <p>Kh√°ch h√†ng: ${orderData.customer.name}</p>
        <p>S·ªë ƒëi·ªán tho·∫°i: ${orderData.customer.phone}</p>
        <p>T·ªïng ti·ªÅn: ${orderData.total.toLocaleString("vi-VN")} ‚Ç´</p>
        <p>Ng√†y ƒë·∫∑t: ${new Date(orderData.created_at).toLocaleString("vi-VN")}</p>
      `;
    }

    // Thay th·∫ø c√°c bi·∫øn trong template
    const emailHtml = templateHtml
      .replace(/{{order_id}}/g, orderData._id)
      .replace(/{{order_date}}/g, new Date(orderData.created_at).toLocaleString("vi-VN"))
      .replace(/{{total_amount}}/g, orderData.total.toLocaleString("vi-VN"))
      .replace(/{{customer_name}}/g, orderData.customer.name)
      .replace(/{{customer_phone}}/g, orderData.customer.phone)
      .replace(/{{customer_email}}/g, orderData.customer.email || "Kh√¥ng c√≥ email")
      .replace(/{{customer_address}}/g, orderData.customer.address)
      .replace(/{{payment_method}}/g, orderData.payment_method === "cod" ? "Thanh to√°n khi nh·∫≠n h√†ng" : "Chuy·ªÉn kho·∫£n ng√¢n h√†ng")
      .replace(/{{products_html}}/g, productsHtml)
      .replace(/{{products_count}}/g, orderData.items?.length || 0)
      .replace(/{{admin_dashboard_url}}/g, `${process.env.FRONTEND_URL || 'http://localhost:5173'}/admin/orders/${orderData._id}`)
      .replace(/{{admin_orders_url}}/g, `${process.env.FRONTEND_URL || 'http://localhost:5173'}/admin/orders`);

    const templateParams = {
      to_email: "sanghtps39612@gmail.com", // Email admin m·∫∑c ƒë·ªãnh
      to_name: "Admin",
      order_id: orderData._id,
      order_date: new Date(orderData.created_at).toLocaleString("vi-VN"),
      total_amount: orderData.total.toLocaleString("vi-VN"),
      customer_name: orderData.customer.name,
      customer_phone: orderData.customer.phone,
      customer_email: orderData.customer.email || "Kh√¥ng c√≥ email",
      customer_address: orderData.customer.address,
      payment_method:
        orderData.payment_method === "cod"
          ? "Thanh to√°n khi nh·∫≠n h√†ng"
          : "Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
      // Th√™m danh s√°ch s·∫£n ph·∫©m
      products_html: productsHtml,
      products_count: orderData.items?.length || 0,
      // Th√¥ng tin admin
      admin_email: "sanghtps39612@gmail.com",
      admin_name: "Admin",
      // HTML content
      message: emailHtml
    };

    console.log("üìß Admin notification template params:", templateParams);

    // S·ª≠ d·ª•ng EmailJS REST API v·ªõi template hi·ªán t·∫°i
    const response = await axios.post(
      `https://api.emailjs.com/api/v1.0/email/send`,
      {
        service_id: EMAILJS_CONFIG.SERVICE_ID,
        template_id: EMAILJS_CONFIG.TEMPLATE_ID, // S·ª≠ d·ª•ng template hi·ªán t·∫°i
        user_id: EMAILJS_CONFIG.PUBLIC_KEY,
        template_params: templateParams,
      },
      {
        headers: {
          "Content-Type": "application/json",
        },
      }
    );

    console.log("‚úÖ Admin notification email sent successfully:", response.data);
    return { success: true, data: response.data };
  } catch (error) {
    console.error(
      "‚ùå Admin notification email error:",
      error.response?.data || error.message
    );
    return { success: false, error: error.response?.data || error.message };
  }
};

const getStatusMessage = (status) => {
  const messageMap = {
    pending:
      "ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ch·ªù x·ª≠ l√Ω. Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o khi c√≥ c·∫≠p nh·∫≠t.",
    shipping: "ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c giao. Vui l√≤ng chu·∫©n b·ªã nh·∫≠n h√†ng.",
    completed:
      "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!",
    canceled:
      "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy. N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá ch√∫ng t√¥i.",
    confirmed:
      "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã ƒë·ªÉ giao h√†ng.",
    delivered:
      "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!",
    cancelled:
      "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy. N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá ch√∫ng t√¥i.",
    paid: "ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng.",
    processing: "ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω thanh to√°n.",
  };
  return messageMap[status] || "Tr·∫°ng th√°i ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.";
};

module.exports = {
  sendOrderConfirmationEmail,
  sendOrderStatusUpdateEmail,
  sendOrderNotificationToAdmin,
};
