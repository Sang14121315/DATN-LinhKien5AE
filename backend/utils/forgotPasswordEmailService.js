const nodemailer = require("nodemailer");
const jwt = require("jsonwebtoken");

// C·∫•u h√¨nh email service cho forgot password
const createTransporter = () => {
  return nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false, // true for 465, false for other ports
    auth: {
      user: "ngtien.2610@gmail.com",
      pass: "chhz oftf ymsd vlxp", // M·∫≠t kh·∫©u ·ª©ng d·ª•ng Google
    },
    tls: {
      rejectUnauthorized: false,
    },
  });
};

// T·∫°o OTP 6 s·ªë
const generateOTP = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// T·∫°o token reset password v·ªõi OTP
const createResetToken = (userId, otp) => {
  return jwt.sign({ id: userId, otp: otp }, process.env.JWT_SECRET, {
    expiresIn: "5m", // 5 ph√∫t
  });
};

// Template email OTP
const createOTPEmailTemplate = (userName, otp) => {
  return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
      <style>
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 600px;
          margin: 0 auto;
          padding: 20px;
          background-color: #f4f4f4;
        }
        .email-container {
          background-color: #ffffff;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .header {
          text-align: center;
          margin-bottom: 30px;
        }
        .logo {
          font-size: 24px;
          font-weight: bold;
          color: #007bff;
          margin-bottom: 10px;
        }
        .title {
          color: #333;
          font-size: 20px;
          margin-bottom: 20px;
        }
        .content {
          margin-bottom: 30px;
        }
        .otp-container {
          text-align: center;
          margin: 30px 0;
          padding: 20px;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          border-radius: 10px;
          color: white;
        }
        .otp-code {
          font-size: 32px;
          font-weight: bold;
          letter-spacing: 8px;
          margin: 10px 0;
          font-family: 'Courier New', monospace;
        }
        .warning {
          background-color: #fff3cd;
          border: 1px solid #ffeaa7;
          border-radius: 5px;
          padding: 15px;
          margin: 20px 0;
          color: #856404;
        }
        .footer {
          margin-top: 30px;
          padding-top: 20px;
          border-top: 1px solid #eee;
          text-align: center;
          color: #666;
          font-size: 14px;
        }
        .link {
          color: #007bff;
          text-decoration: none;
        }
        .link:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="email-container">
        <div class="header">
          <div class="logo">üñ•Ô∏è 5AELINHKIEN</div>
          <h1 class="title">M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
        </div>
        
        <div class="content">
          <p>Xin ch√†o <strong>${userName}</strong>,</p>
          
          <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n t·∫°i 5AELINHKIEN.</p>
          
          <p>Vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
          
          <div class="otp-container">
            <p style="margin: 0 0 10px 0; font-size: 16px;">M√£ x√°c th·ª±c c·ªßa b·∫°n:</p>
            <div class="otp-code">${otp}</div>
            <p style="margin: 10px 0 0 0; font-size: 14px; opacity: 0.9;">M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t</p>
          </div>
          
          <div class="warning">
            <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
            <ul>
              <li>M√£ n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t</li>
              <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
              <li>ƒê·ªÉ b·∫£o m·∫≠t, vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi ng∆∞·ªùi kh√°c</li>
              <li>M√£ ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt l·∫ßn</li>
            </ul>
          </div>
        </div>
        
        <div class="footer">
          <p>Tr√¢n tr·ªçng,<br>
          <strong>ƒê·ªôi ng≈© 5aelinhkien</strong></p>
          
          <p>üìß Email: support@5aelinhkien.com<br>
          üìû Hotline: 0123456789<br>
          üåê Website: <a href="${
            process.env.FRONTEND_URL || "http://localhost:5173"
          }" class="link">${
    process.env.FRONTEND_URL || "http://localhost:5173"
  }</a></p>
          
          <p style="font-size: 12px; color: #999;">
            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
          </p>
        </div>
      </div>
    </body>
    </html>
  `;
};

// Template email reset password th√†nh c√¥ng
const createResetSuccessEmailTemplate = (userName) => {
  return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng</title>
      <style>
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 600px;
          margin: 0 auto;
          padding: 20px;
          background-color: #f4f4f4;
        }
        .email-container {
          background-color: #ffffff;
          border-radius: 10px;
          padding: 30px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .header {
          text-align: center;
          margin-bottom: 30px;
        }
        .logo {
          font-size: 24px;
          font-weight: bold;
          color: #28a745;
          margin-bottom: 10px;
        }
        .title {
          color: #333;
          font-size: 20px;
          margin-bottom: 20px;
        }
        .success-icon {
          font-size: 48px;
          color: #28a745;
          margin-bottom: 20px;
        }
        .content {
          margin-bottom: 30px;
        }
        .login-button {
          display: inline-block;
          background-color: #28a745;
          color: white;
          padding: 12px 30px;
          text-decoration: none;
          border-radius: 5px;
          font-weight: bold;
          margin: 20px 0;
          text-align: center;
        }
        .login-button:hover {
          background-color: #218838;
        }
        .footer {
          margin-top: 30px;
          padding-top: 20px;
          border-top: 1px solid #eee;
          text-align: center;
          color: #666;
          font-size: 14px;
        }
        .link {
          color: #007bff;
          text-decoration: none;
        }
        .link:hover {
          text-decoration: underline;
        }
      </style>
    </head>
    <body>
      <div class="email-container">
        <div class="header">
          <div class="logo">üñ•Ô∏è 5AELINHKIEN</div>
          <h1 class="title">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng</h1>
        </div>
        
        <div class="content" style="text-align: center;">
          <div class="success-icon">‚úÖ</div>
          <p>Xin ch√†o <strong>${userName}</strong>,</p>
          
          <p>M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng!</p>
          
          <p>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa m√¨nh v·ªõi m·∫≠t kh·∫©u m·ªõi.</p>
          
          <div style="text-align: center;">
            <a href="${process.env.FRONTEND_URL}/login" class="login-button">
              üîë ƒêƒÉng nh·∫≠p ngay
            </a>
          </div>
          
          <p style="margin-top: 20px;">
            <strong>L∆∞u √Ω b·∫£o m·∫≠t:</strong>
          </p>
          <ul style="text-align: left; max-width: 400px; margin: 0 auto;">
            <li>Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u v·ªõi ng∆∞·ªùi kh√°c</li>
            <li>S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh v·ªõi k√Ω t·ª± ƒë·∫∑c bi·ªát</li>
            <li>ƒêƒÉng xu·∫•t khi s·ª≠ d·ª•ng thi·∫øt b·ªã c√¥ng c·ªông</li>
          </ul>
        </div>
        
        <div class="footer">
          <p>Tr√¢n tr·ªçng,<br>
          <strong>ƒê·ªôi ng≈© 5AELINHKIEN</strong></p>
          
          <p>üìß Email: support@5aelinhkien.com<br>
          üìû Hotline: 0123456789<br>
          üåê Website: <a href="${process.env.FRONTEND_URL}" class="link">${process.env.FRONTEND_URL}</a></p>
          
          <p style="font-size: 12px; color: #999;">
            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
          </p>
        </div>
      </div>
    </body>
    </html>
  `;
};

// G·ª≠i email OTP
const sendOTPEmail = async (user) => {
  try {
    console.log("üîß Creating email transporter...");
    const transporter = createTransporter();

    console.log("üîß Generating OTP...");
    const otp = generateOTP();
    const resetToken = createResetToken(user._id, otp);

    console.log("üîß Sending OTP email to:", user.email);
    console.log("üîß OTP:", otp);

    const mailOptions = {
      from: '"5AELINHKIEN" <ngtien.2610@gmail.com>',
      to: user.email,
      subject: "üîê M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - 5AELINHKIEN",
      html: createOTPEmailTemplate(user.name, otp),
    };

    const info = await transporter.sendMail(mailOptions);
    console.log("‚úÖ OTP email sent successfully:", info.messageId);

    return {
      success: true,
      messageId: info.messageId,
      resetToken: resetToken,
      otp: otp, // Ch·ªâ tr·∫£ v·ªÅ trong development
    };
  } catch (error) {
    console.error("‚ùå Error sending OTP email:", error);
    console.error("‚ùå Error details:", {
      message: error.message,
      code: error.code,
      command: error.command,
      response: error.response,
      responseCode: error.responseCode,
    });
    throw new Error("Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
};

// G·ª≠i email th√¥ng b√°o reset password th√†nh c√¥ng
const sendResetSuccessEmail = async (user) => {
  try {
    const transporter = createTransporter();

    const mailOptions = {
      from: '"5AELINHKIEN" <ngtien.2610@gmail.com>',
      to: user.email,
      subject: "‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng - 5AELINHKIEN",
      html: createResetSuccessEmailTemplate(user.name),
    };

    const info = await transporter.sendMail(mailOptions);
    console.log("‚úÖ Reset success email sent successfully:", info.messageId);

    return {
      success: true,
      messageId: info.messageId,
    };
  } catch (error) {
    console.error("‚ùå Error sending reset success email:", error);
    // Kh√¥ng throw error v√¨ ƒë√¢y ch·ªâ l√† email th√¥ng b√°o
    return {
      success: false,
      error: error.message,
    };
  }
};

// Verify reset token v·ªõi OTP
const verifyResetToken = (token, otp) => {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // Ki·ªÉm tra OTP c√≥ kh·ªõp kh√¥ng
    if (decoded.otp !== otp) {
      throw new Error("M√£ OTP kh√¥ng ƒë√∫ng");
    }

    return decoded;
  } catch (error) {
    if (error.name === "TokenExpiredError") {
      throw new Error("M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi.");
    }
    throw new Error("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
  }
};

module.exports = {
  sendOTPEmail,
  sendResetSuccessEmail,
  verifyResetToken,
  createResetToken,
  generateOTP,
};
