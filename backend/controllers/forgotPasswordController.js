const Joi = require("joi");
const UserService = require("../services/userService");

// Schema validation cho forgot password
const forgotPasswordSchema = Joi.object({
  email: Joi.string()
    .email({ tlds: { allow: false } })
    .required()
    .messages({
      "string.email": "Email kh√¥ng h·ª£p l·ªá",
      "any.required": "Email l√† b·∫Øt bu·ªôc",
      "string.empty": "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    }),
});

// Schema validation cho reset password v·ªõi OTP
const resetPasswordSchema = Joi.object({
  token: Joi.string().required().messages({
    "any.required": "Token l√† b·∫Øt bu·ªôc",
    "string.empty": "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
  }),
  otp: Joi.string()
    .length(6)
    .pattern(/^\d{6}$/)
    .required()
    .messages({
      "string.length": "M√£ OTP ph·∫£i c√≥ ƒë√∫ng 6 s·ªë",
      "string.pattern.base": "M√£ OTP ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë",
      "any.required": "M√£ OTP l√† b·∫Øt bu·ªôc",
      "string.empty": "M√£ OTP kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    }),
  newPassword: Joi.string()
    .min(6)
    .max(50)
    .pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
    .required()
    .messages({
      "string.min": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
      "string.max": "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±",
      "string.pattern.base":
        "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa, 1 ch·ªØ th∆∞·ªùng v√† 1 s·ªë",
      "any.required": "M·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc",
      "string.empty": "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    }),
});

// G·ª≠i email forgot password
exports.sendForgotPasswordEmail = async (req, res) => {
  try {
    console.log("üìß Forgot password request received:", req.body);

    // Validate input
    const { error } = forgotPasswordSchema.validate(req.body);
    if (error) {
      return res.status(400).json({
        success: false,
        message: error.details[0].message,
      });
    }

    const { email } = req.body;

    // G·ªçi service ƒë·ªÉ x·ª≠ l√Ω
    const result = await UserService.forgotPassword(email);

    console.log("‚úÖ Forgot password email sent successfully");

    res.json({
      success: true,
      message: result.message,
      resetToken: result.resetToken,
      otp: result.otp, // Ch·ªâ tr·∫£ v·ªÅ trong development
    });
  } catch (error) {
    console.error("‚ùå Forgot password error:", error);

    // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
    if (error.message.includes("Email kh√¥ng t·ªìn t·∫°i")) {
      return res.status(404).json({
        success: false,
        message: error.message,
      });
    }

    if (error.message.includes("g·ª≠i email")) {
      return res.status(500).json({
        success: false,
        message: error.message,
      });
    }

    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  }
};

// Reset password v·ªõi OTP
exports.resetPassword = async (req, res) => {
  try {
    console.log("üîê Reset password request received");

    // Validate input
    const { error } = resetPasswordSchema.validate(req.body);
    if (error) {
      return res.status(400).json({
        success: false,
        message: error.details[0].message,
      });
    }

    const { token, otp, newPassword } = req.body;

    // G·ªçi service ƒë·ªÉ x·ª≠ l√Ω
    const result = await UserService.resetPassword(token, otp, newPassword);

    console.log("‚úÖ Password reset successfully");

    res.json({
      success: true,
      message: result.message,
    });
  } catch (error) {
    console.error("‚ùå Reset password error:", error);

    // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
    if (error.message.includes("OTP")) {
      return res.status(400).json({
        success: false,
        message: error.message,
      });
    }

    if (error.message.includes("Token") || error.message.includes("h·∫øt h·∫°n")) {
      return res.status(400).json({
        success: false,
        message: error.message,
      });
    }

    if (error.message.includes("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i")) {
      return res.status(404).json({
        success: false,
        message: error.message,
      });
    }

    res.status(500).json({
      success: false,
      message: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  }
};
